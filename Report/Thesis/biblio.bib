% !TEX encoding = IsoLatin

% La bibliografia, da inserirsi solo se ci sono state citazioni.
% In questo caso ricordarsi che bisogna sempre elaborare due volte il file .TEX
% perché la prima volta viene generata la bibliografia mentre la seconda volta viene inclusa

% NOTA: citare il DOI non è obbligatorio ma MOLTO desiderabile

% esempio citazione articolo a congresso
@inproceedings{psisec,
  author={Enrici,Ivan and Ancilli,Mario and Lioy,Antonio},
  title = {A psychological approach to information technology security},
  booktitle = {HSI-2010: 3rd Int. Conf. on Human System Interactions},
  address = {Rzeszòw (Poland)},
  year = {May 13-15, 2010},
  pages = {459--466},
  doi ={10.1109/HSI.2010.5514528}
}

% esempio citazione articolo su rivista
@article{tpa,
  author={G.Cabiddu and E.Cesena and R.Sassu and D.Vernizzi and G.Ramunno and A.Lioy},
  title={{Trusted Platform Agent}},
  journal = {IEEE Software},
  volume = {28},
  number = {2},
  month = {March-April},
  year = {2011},
  pages = {35--41},
  doi = {10.1109/MS.2010.160}
}

% esempio citazione capitolo di un libro fatto come collezione di contributi da autori diversi
@incollection{tc,
  author={A.Lioy and G.Ramunno},
  title={Trusted Computing},
  booktitle={Handbook of Information and Communication Security},
  editor={P.Stavroulakis and M.Stamp},
  publisher={Springer},
  year={2010},
  pages={697-717},
  isbn={978-3-642-04116-7},
  doi={10.1007/978-3-642-04117-4_32}
}

 % esempio citazione pagina web di un progetto
@misc{openssl,
  author={{The OpenSSL project}},
  note={\url{http://www.openssl.org/}}
}

% esempio citazione RFC
@misc{tls12, crossref={rfc5246}}

@misc{rfc5246,
  author={T. Dierks and E. Rescorla},
  title={{The Transport Layer Security (TLS) Protocol Version 1.2}},
  howpublished={\rfc{5246}},
  year=2008,
  month=aug,
  doi={10.17487/RFC5246}
}

 % esempio citazione libro
@book{seceng,
  author={Ross J. Anderson},
  title={Security engineering},
  publisher={Wiley},
  year={2008},
  _isbn={978-0-470-06852-6}
}



% TODO: XXX Bibliography XXX

%%FUZZING Paper
@article{LiJun2018Fas,
issn = {2523-3246},
abstract = {Security vulnerability is one of the root causes of cyber-security threats. To discover vulnerabilities and fix them in advance, researchers have proposed several techniques, among which fuzzing is the most widely used one. In recent years, fuzzing solutions, like AFL, have made great improvements in vulnerability discovery. This paper presents a summary of the recent advances, analyzes how they improve the fuzzing process, and sheds light on future work in fuzzing. Firstly, we discuss the reason why fuzzing is popular, by comparing different commonly used vulnerability discovery techniques. Then we present an overview of fuzzing solutions, and discuss in detail one of the most popular type of fuzzing, i.e., coverage-based fuzzing. Then we present other techniques that could make fuzzing process smarter and more efficient. Finally, we show some applications of fuzzing, and discuss new trends of fuzzing and potential future directions.},
journal = {Cybersecurity},
pages = {1--13},
volume = {1},
publisher = {Springer Singapore},
number = {1},
year = {2018},
title = {Fuzzing: a survey},
language = {eng},
address = {Singapore},
author = {Li, Jun and Zhao, Bodong and Zhang, Chao},
keywords = {Vulnerability discovery ; Software security ; Fuzzing ; Coverage-based fuzzing},
}


%%ASIACS Paper
@inproceedings{VanhoefM2017Dlvi,
abstract = {© 2017 ACM. We use model-based testing techniques to detect logical vulnerabilities in implementations of the Wi-Fi handshake. This reveals new fingerprinting techniques, multiple downgrade attacks, and Denial of Service (DoS) vulnerabilities. Stations use the Wi-Fi handshake to securely connect with wireless networks. In this handshake, mutually supported capabilities are determined, and fresh pairwise keys are negotiated. As a result, a proper implementation of the Wi-Fi handshake is essential in protecting all subsequent traffic. To detect the presence of erroneous behaviour, we propose a model-based technique that generates a set of representative test cases. These tests cover all states of the Wi-Fi handshake, and explore various edge cases in each state. We then treat the implementation under test as a black box, and execute all generated tests. Determining whether a failed test introduces a security weakness is done manually. We tested 12 implementations using this approach, and discovered irregularities in all of them. Our findings include fingerprinting mechanisms, DoS attacks, and downgrade attacks where an adversary can force usage of the insecure WPA-TKIP cipher. Finally, we explain how one of our downgrade attacks highlights incorrect claims made in the 802.11 standard.},
journal = {ASIA CCS 2017 - Proceedings of the 2017 ACM Asia Conference on Computer and Communications Security},
pages = {360--371},
publisher = {ACM},
isbn = {9781450349444},
year = {2017},
title = {Discovering logical vulnerabilities in the Wi-Fi handshake using model-based testing},
language = {eng},
author = {Vanhoef, M and Schepers, D and Piessens, F},
keywords = {iMinds},
organization = {Karri, Ramesh},
url = {https://doi.org/10.1145/3052973},
}


%%KRACK Paper
@inproceedings{VanhoefM2017KraF,
issn = {1543-7221},
abstract = {© 2017 author(s). We introduce the key reinstallation attack. This attack abuses design or implementation flaws in cryptographic protocols to reinstall an already-in-use key. This resets the key's associated parameters such as transmit nonces and receive replay counters. Several types of cryptographic Wi-Fi handshakes are affected by the attack. All protected Wi-Fi networks use the 4-way handshake to generate a fresh session key. So far, this 14-year-old handshake has remained free from attacks, and is even proven secure. However, we show that the 4-way handshake is vulnerable to a key reinstallation attack. Here, the adversary tricks a victim into reinstalling an already-in-use key. This is achieved by manipulating and replaying handshake messages. When reinstalling the key, associated parameters such as the incremental transmit packet number (nonce) and receive packet number (replay counter) are reset to their initial value. Our key reinstallation attack also breaks the PeerKey, group key, and Fast BSS Transition (FT) handshake. The impact depends on the handshake being attacked, and the data-confidentiality protocol in use. Simplified, against AES-CCMP an adversary can replay and decrypt (but not forge) packets. This makes it possible to hijack TCP streams and inject malicious data into them. Against WPATKIP and GCMP the impact is catastrophic: Packets can be replayed, decrypted, and forged. Because GCMP uses the same authentication key in both communication directions, it is especially affected. Finally, we confirmed our findings in practice, and found that every Wi-Fi device is vulnerable to some variant of our attacks. Notably, our attack is exceptionally devastating against Android 6.0: It forces the client into using a predictable all-zero encryption key.},
journal = {Proceedings of the ACM Conference on Computer and Communications Security},
pages = {1313--1328},
publisher = {Association for Computing Machinery (ACM)},
isbn = {9781450349468},
year = {2017},
title = {Key reinstallation attacks: Forcing nonce Reuse in WPA2},
language = {eng},
author = {Vanhoef, M and Piessens, F},
keywords = {iMinds},
organization = {Thuraisingham, Bhavani M},
url = {https://doi.org/10.1145/3133956},
}


